diff --git a/GaudiHive/src/AvalancheSchedulerSvc.cpp b/GaudiHive/src/AvalancheSchedulerSvc.cpp
index 5bfff2f..166162f 100644
--- a/GaudiHive/src/AvalancheSchedulerSvc.cpp
+++ b/GaudiHive/src/AvalancheSchedulerSvc.cpp
@@ -33,8 +33,6 @@
 #include "boost/algorithm/string.hpp"
 #include "boost/thread.hpp"
 #include "boost/tokenizer.hpp"
-// DP waiting for the TBB service
-#include "tbb/tbb_stddef.h"
 
 // Instantiation of a static factory class used by clients to create instances of this service
 DECLARE_COMPONENT( AvalancheSchedulerSvc )
diff --git a/GaudiHive/src/HiveNumbers.h b/GaudiHive/src/HiveNumbers.h
index df02504..d10a1db 100644
--- a/GaudiHive/src/HiveNumbers.h
+++ b/GaudiHive/src/HiveNumbers.h
@@ -33,7 +33,7 @@ class IRndmGenSvc;
 
 namespace HiveRndm {
 
-  typedef tbb::spin_rw_mutex_v3 HiveNumbersMutex;
+  typedef tbb::spin_rw_mutex HiveNumbersMutex;
 
   class GAUDI_API HiveNumbers {
   private:
diff --git a/GaudiHive/src/ThreadPoolSvc.cpp b/GaudiHive/src/ThreadPoolSvc.cpp
index 00ac21c..a8d20c7 100644
--- a/GaudiHive/src/ThreadPoolSvc.cpp
+++ b/GaudiHive/src/ThreadPoolSvc.cpp
@@ -114,7 +114,7 @@ StatusCode ThreadPoolSvc::initPool( const int& poolSize ) {
     Gaudi::Concurrency::ConcurrencyFlags::setNumThreads( m_threadPoolSize );
 
     // Create the task arena to run all algorithms
-    m_arena = tbb::task_arena( m_threadPoolSize + 1 );
+    m_arena.initialize( m_threadPoolSize + 1 );
 
     // Create the barrier for task synchronization at termination
     // (here we increase the number of threads by one to account for calling thread)
